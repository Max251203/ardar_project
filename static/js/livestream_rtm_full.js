// === LIVESTREAM - ROOM AGORA JS FILE ===
// === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ Agora RTC + RTM ===

// üß© –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ —à–∞–±–ª–æ–Ω–∞
const APP_ID = window.livestreamAppId;
const CHANNEL = window.livestreamChannel;
const UID = String(window.livestreamUserId);
const USER_NAME = window.livestreamUserName;
const IS_HOST = window.livestreamIsHost;
const CSRF_TOKEN = window.livestreamCsrfToken;
const ROOM_ID = window.livestreamRoomId;
const IS_SUPERUSER = window.livestreamIsSuperuser;

// üß† –°–æ—Å—Ç–æ—è–Ω–∏—è
let rtcClient, rtmClient, rtmChannel;
let localTracks = { audio: null, video: null };
let isAudioMuted = !IS_HOST;
let isVideoMuted = false;
let canUseMic = true;
let canUseCam = true;
let isSpeaker = IS_HOST;
let hasRaisedHand = false;
let participants = {};
let currentSpeakerUid = IS_HOST ? UID : null;
let userNames = {};
let chatHistory = [];
let wasKicked = localStorage.getItem('kicked_from_' + ROOM_ID) === 'true';
let waitingApproval = wasKicked;
let roomEnded = false;

// üîß –£—Ç–∏–ª–∏—Ç—ã
const log = (...args) => console.log('%c[ARDAR]', 'color:#3b82f6;font-weight:bold', ...args);
const showAlert = (msg, type = 'info') => {
  const el = document.getElementById('custom-alert');
  if (!el) return;
  el.textContent = msg;
  el.className = `custom-alert ${type}`;
  el.style.display = 'block';
  setTimeout(() => (el.style.display = 'none'), 3500);
};
const sendRTM = data => {
  if (rtmChannel) rtmChannel.sendMessage({ text: JSON.stringify(data) });
};
const formatTime = dt => {
  const h = dt.getHours().toString().padStart(2, '0');
  const m = dt.getMinutes().toString().padStart(2, '0');
  return `${h}:${m}`;
};

// === RTC –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
async function initRTC() {
  log('üü¢ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RTC');
  
  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –∏—Å–∫–ª—é—á–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –æ–∂–∏–¥–∞–Ω–∏—è
  if (wasKicked) {
    showWaitingApprovalScreen();
    return;
  }
  
  rtcClient = AgoraRTC.createClient({ mode: 'rtc', codec: 'vp8' });

  rtcClient.on('user-published', async (user, mediaType) => {
    await rtcClient.subscribe(user, mediaType);
    const uid = String(user.uid);
    
    // –°–æ–∑–¥–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
    if (!participants[uid]) {
      participants[uid] = { 
        uid: uid,
        name: userNames[uid] || "–£—á–∞—Å—Ç–Ω–∏–∫",
        isAudioMuted: true,
        isVideoMuted: true,
        allowMic: true,
        allowCam: true,
        isHost: false
      };
    }
    
    if (mediaType === 'video') {
      participants[uid].videoTrack = user.videoTrack;
      participants[uid].isVideoMuted = false;
    }
    
    if (mediaType === 'audio') {
      participants[uid].audioTrack = user.audioTrack;
      participants[uid].isAudioMuted = false;
      user.audioTrack.play();
    }
    
    updateUI();
  });

  rtcClient.on('user-unpublished', (user, mediaType) => {
    const uid = String(user.uid);
    if (participants[uid]) {
      if (mediaType === 'video') {
        participants[uid].videoTrack = null;
        participants[uid].isVideoMuted = true;
      }
      if (mediaType === 'audio') {
        participants[uid].audioTrack = null;
        participants[uid].isAudioMuted = true;
      }
    }
    updateUI();
  });

  rtcClient.on('user-left', (user) => {
    const uid = String(user.uid);
    if (participants[uid]) {
      // –ï—Å–ª–∏ —É—à–µ–ª –≤–µ–¥—É—â–∏–π, —É–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö
      if (participants[uid].isHost) {
        showAlert("–í–µ–¥—É—â–∏–π –ø–æ–∫–∏–Ω—É–ª —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é", "warning");
      }
      
      delete participants[uid];
      
      // –ï—Å–ª–∏ —É—à–µ–ª –≥–æ–≤–æ—Ä—è—â–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–æ–≤–æ –≤–µ–¥—É—â–µ–º—É
      if (currentSpeakerUid === uid) {
        const hostUid = Object.entries(participants).find(([_, p]) => p.isHost)?.[0] || null;
        if (hostUid) {
          currentSpeakerUid = hostUid;
          
          if (IS_HOST) {
            sendRTM({
              type: "current_speaker",
              speakerUid: hostUid,
              speakerName: participants[hostUid].name
            });
          }
        } else {
          currentSpeakerUid = null;
        }
      }
      
      updateUI();
    }
  });

  const res = await fetch(`/livestream/token/?channel=${CHANNEL}&uid=${UID}&role=1`);
  const { token } = await res.json();
  await rtcClient.join(APP_ID, CHANNEL, token, parseInt(UID));

  const [micTrack, camTrack] = await AgoraRTC.createMicrophoneAndCameraTracks();
  localTracks.audio = micTrack;
  localTracks.video = camTrack;

  if (!IS_HOST) await micTrack.setMuted(true);

  await rtcClient.publish([micTrack, camTrack]);

  // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–±—è –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  participants[UID] = {
    uid: UID,
    name: USER_NAME,
    videoTrack: camTrack,
    audioTrack: micTrack,
    isAudioMuted: !IS_HOST,
    isVideoMuted: false,
    isHost: IS_HOST,
    isLocal: true,
    allowMic: true,
    allowCam: true
  };
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤–æ–µ –∏–º—è
  userNames[UID] = USER_NAME;

  if (IS_HOST) {
    currentSpeakerUid = UID;
    isSpeaker = true;
  }

  updateUI();
}

// === RTM –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
async function initRTM() {
  log('üü£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RTM');
  const res = await fetch('/livestream/rtm_token/');
  const { token } = await res.json();

  rtmClient = AgoraRTM.createInstance(APP_ID);
  await rtmClient.login({ uid: UID, token });

  rtmChannel = rtmClient.createChannel(CHANNEL);
  await rtmChannel.join();
  log('‚úÖ RTM –ø–æ–¥–∫–ª—é—á–µ–Ω');

  // –ü—Ä–∏–Ω–∏–º–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–∞–Ω–∞–ª–∞
  rtmChannel.on('ChannelMessage', ({ text }, senderId) => {
    try {
      const payload = JSON.parse(text);
      handleRTMMessage(payload, senderId);
    } catch (e) {
      console.warn('–ù–µ–≤–∞–ª–∏–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ RTM:', text);
    }
  });

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ –≤—Ö–æ–¥–µ
  sendRTM({ 
    type: 'join', 
    uid: UID, 
    name: USER_NAME,
    wasKicked: wasKicked,
    isAudioMuted: isAudioMuted,
    isVideoMuted: isVideoMuted,
    allowMic: canUseMic,
    allowCam: canUseCam,
    isHost: IS_HOST
  });

  // –ï—Å–ª–∏ –º—ã –≤–µ–¥—É—â–∏–π, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ–±—è –∫–∞–∫ –≥–æ–≤–æ—Ä—è—â–µ–≥–æ
  if (IS_HOST) {
    setTimeout(() => {
      currentSpeakerUid = UID;
      sendRTM({
        type: 'current_speaker',
        speakerUid: UID,
        speakerName: USER_NAME
      });
    }, 1000); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –≤—Å–µ —É—Å–ø–µ–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
  }

  // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
  sendRTM({ type: 'request_chat_history', uid: UID });
  
  // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–≤–æ—Ä—è—â–µ–≥–æ
  sendRTM({ type: 'request_current_speaker', uid: UID });
  
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–º–Ω–∞—Ç—ã
  checkRoomStatus();
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–Ω–∞—Ç—ã
function checkRoomStatus() {
  fetch(`/livestream/check_status/${ROOM_ID}/`)
    .then(response => response.json())
    .then(data => {
      if (data.room_ended && !roomEnded) {
        roomEnded = true;
        showAlert("–¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤–µ–¥—É—â–∏–º", "warning");
        setTimeout(() => {
          window.location.href = "/livestream/";
        }, 2000);
      }
    })
    .catch(err => console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:", err));
  
  if (!roomEnded) {
    setTimeout(checkRoomStatus, 5000);
  }
}

// === –≠–∫—Ä–∞–Ω –æ–∂–∏–¥–∞–Ω–∏—è –æ–¥–æ–±—Ä–µ–Ω–∏—è ===
function showWaitingApprovalScreen() {
  // –°–∫—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
  document.querySelector('.livestream-grid').style.display = 'none';
  
  // –°–æ–∑–¥–∞–µ–º —ç–∫—Ä–∞–Ω –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ —à–∞–±–ª–æ–Ω—É
  const waitingScreen = document.createElement('div');
  waitingScreen.className = 'waiting-screen';
  waitingScreen.innerHTML = `
    <h2>–û–∂–∏–¥–∞–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –≤–µ–¥—É—â–µ–≥–æ</h2>
    <p id="waiting-message">–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–µ–¥—É—â–µ–º—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å —Ä–µ—à–µ–Ω–∏—è.</p>
    <div class="loader"></div>
    <div id="status-message" class="status-message"></div>
    <button id="cancel-waiting" class="btn-cancel">–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É</button>
  `;
  
  document.querySelector('main').appendChild(waitingScreen);
  
  // –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
  document.getElementById('cancel-waiting').onclick = () => {
    window.location.href = "/livestream/";
  };
}

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ RTM —Å–æ–æ–±—â–µ–Ω–∏–π ===
function handleRTMMessage(data, senderId) {
  const { type, uid, name } = data;
  log('üì® RTM MSG:', type, data);

  // 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
  if (uid && name) {
    userNames[uid] = name;
    if (participants[uid]) {
      participants[uid].name = name;
    }
  }

  // 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
  switch (type) {
    case 'join':
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –∏—Å–∫–ª—é—á–µ–Ω –∏ –ø—ã—Ç–∞–µ—Ç—Å—è –≤–æ–π—Ç–∏
      if (data.wasKicked && IS_HOST) {
        showJoinRequestDialog(uid, name);
      } else {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–æ–≤–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É
        sendRTM({ 
          type: 'user_info', 
          uid: UID, 
          name: USER_NAME,
          isAudioMuted: isAudioMuted,
          isVideoMuted: isVideoMuted,
          allowMic: canUseMic,
          allowCam: canUseCam,
          isHost: IS_HOST
        });
        
        // –ï—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ –µ—â–µ –Ω–µ –≤ —Å–ø–∏—Å–∫–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        if (!participants[uid]) {
          participants[uid] = {
            uid: uid,
            name: name,
            isAudioMuted: data.isAudioMuted !== undefined ? data.isAudioMuted : true,
            isVideoMuted: data.isVideoMuted !== undefined ? data.isVideoMuted : true,
            allowMic: data.allowMic !== undefined ? data.allowMic : true,
            allowCam: data.allowCam !== undefined ? data.allowCam : true,
            isHost: data.isHost || false
          };
        } else {
          // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–µ
          participants[uid].name = name;
          if (data.isAudioMuted !== undefined) participants[uid].isAudioMuted = data.isAudioMuted;
          if (data.isVideoMuted !== undefined) participants[uid].isVideoMuted = data.isVideoMuted;
          if (data.allowMic !== undefined) participants[uid].allowMic = data.allowMic;
          if (data.allowCam !== undefined) participants[uid].allowCam = data.allowCam;
          if (data.isHost !== undefined) participants[uid].isHost = data.isHost;
        }
        
        // –ï—Å–ª–∏ –º—ã –≤–µ–¥—É—â–∏–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–≤–æ—Ä—è—â–µ–≥–æ
        if (IS_HOST && currentSpeakerUid) {
          sendRTM({
            type: 'current_speaker',
            speakerUid: currentSpeakerUid,
            speakerName: participants[currentSpeakerUid]?.name || USER_NAME
          });
        }
        
        // –ï—Å–ª–∏ –º—ã –≤–µ–¥—É—â–∏–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
        if (IS_HOST && chatHistory.length > 0) {
          sendRTM({ 
            type: 'chat_history', 
            uid: uid,
            history: chatHistory 
          });
        }
        
        updateUI();
      }
      break;
    
    case 'join_request_approved':
      if (uid === UID && waitingApproval) {
        waitingApproval = false;
        localStorage.removeItem('kicked_from_' + ROOM_ID);
        wasKicked = false;
        showAlert("–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Ö–æ–¥ –æ–¥–æ–±—Ä–µ–Ω", "success");
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        const statusMsg = document.getElementById('status-message');
        if (statusMsg) {
          statusMsg.textContent = "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –í—Ö–æ–¥ –≤ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é...";
        }
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é
        setTimeout(() => {
          window.location.reload();
        }, 1500);
      }
      break;
      
    case 'join_request_rejected':
      if (uid === UID && waitingApproval) {
        showAlert("–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Ö–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω", "error");
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        const statusMsg = document.getElementById('status-message');
        if (statusMsg) {
          statusMsg.textContent = "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –≤–µ–¥—É—â–∏–º.";
        }
        
        setTimeout(() => {
          window.location.href = "/livestream/";
        }, 2000);
      }
      break;
    
    case 'user_info':
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      userNames[uid] = name;
      
      // –ï—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ –µ—â–µ –Ω–µ –≤ —Å–ø–∏—Å–∫–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
      if (!participants[uid]) {
        participants[uid] = {
          uid: uid,
          name: name,
          isAudioMuted: data.isAudioMuted !== undefined ? data.isAudioMuted : true,
          isVideoMuted: data.isVideoMuted !== undefined ? data.isVideoMuted : true,
          allowMic: data.allowMic !== undefined ? data.allowMic : true,
          allowCam: data.allowCam !== undefined ? data.allowCam : true,
          isHost: data.isHost || false
        };
      } else {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–µ
        participants[uid].name = name;
        if (data.isAudioMuted !== undefined) participants[uid].isAudioMuted = data.isAudioMuted;
        if (data.isVideoMuted !== undefined) participants[uid].isVideoMuted = data.isVideoMuted;
        if (data.allowMic !== undefined) participants[uid].allowMic = data.allowMic;
        if (data.allowCam !== undefined) participants[uid].allowCam = data.allowCam;
        if (data.isHost !== undefined) participants[uid].isHost = data.isHost;
      }
      
      updateUI();
      break;
      
    case 'request_current_speaker':
      // –ï—Å–ª–∏ –º—ã –≤–µ–¥—É—â–∏–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–≤–æ—Ä—è—â–µ–≥–æ
      if (IS_HOST && currentSpeakerUid && participants[currentSpeakerUid]) {
        sendRTM({
          type: 'current_speaker',
          speakerUid: currentSpeakerUid,
          speakerName: participants[currentSpeakerUid].name
        });
      }
      break;

    case 'current_speaker':
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–≤–æ—Ä—è—â–µ–≥–æ
      currentSpeakerUid = data.speakerUid;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≥–æ–≤–æ—Ä—è—â–µ–≥–æ
      if (UID === data.speakerUid) {
        isSpeaker = true;
      } else if (isSpeaker && UID !== data.speakerUid) {
        isSpeaker = false;
      }
      
      // –í–∞–∂–Ω–æ: –æ–±–Ω–æ–≤–ª—è–µ–º UI –¥–ª—è –≤—Å–µ—Ö
      updateUI();
      break;

    case 'request_chat_history':
      if (IS_HOST && chatHistory.length > 0) {
        sendRTM({ 
          type: 'chat_history', 
          uid: uid,
          history: chatHistory 
        });
      }
      break;

    case 'chat_history':
      if (Array.isArray(data.history)) {
        // –û—á–∏—â–∞–µ–º —á–∞—Ç –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∏—Å—Ç–æ—Ä–∏–∏
        const chatLog = document.getElementById('chat-log');
        if (chatLog) chatLog.innerHTML = '';
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
        data.history.forEach(msg => {
          renderChat(msg.name, msg.message, msg.time);
        });
      }
      break;

    case 'chat':
      const time = data.time || formatTime(new Date());
      renderChat(name, data.message, time);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ (–≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏)
      chatHistory.push({ name, message: data.message, time });
      if (chatHistory.length > 100) chatHistory.shift();
      
      break;

    case 'mute':
      if (uid === UID && localTracks.audio) {
        localTracks.audio.setMuted(data.state);
        isAudioMuted = data.state;
        if (participants[UID]) {
          participants[UID].isAudioMuted = data.state;
        }
        updateLocalControls();
      }
      
      if (participants[uid]) {
        participants[uid].isAudioMuted = data.state;
      }
      
      updateUI();
      break;

    case 'cam_off':
      if (uid === UID && localTracks.video) {
        localTracks.video.setMuted(data.state);
        isVideoMuted = data.state;
        if (participants[UID]) {
          participants[UID].isVideoMuted = data.state;
        }
        updateLocalControls();
      }
      
      if (participants[uid]) {
        participants[uid].isVideoMuted = data.state;
      }
      
      updateUI();
      break;

    case 'permission':
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      if (participants[uid]) {
        if (data.device === 'mic') {
          participants[uid].allowMic = data.state;
        }
        if (data.device === 'cam') {
          participants[uid].allowCam = data.state;
        }
      }
      
      // –ï—Å–ª–∏ —ç—Ç–æ –Ω–∞—à–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
      if (uid === UID) {
        if (data.device === 'mic') {
          canUseMic = data.state;
          showAlert(`–ú–∏–∫—Ä–æ—Ñ–æ–Ω ${data.state ? '—Ä–∞–∑—Ä–µ—à—ë–Ω' : '–∑–∞–ø—Ä–µ—â—ë–Ω'}`, data.state ? "success" : "warning");
          
          // –ï—Å–ª–∏ –∑–∞–ø—Ä–µ—Ç–∏–ª–∏ –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω –≤–∫–ª—é—á–µ–Ω - –≤—ã–∫–ª—é—á–∞–µ–º
          if (!data.state && !isAudioMuted && localTracks.audio) {
            localTracks.audio.setMuted(true);
            isAudioMuted = true;
            if (participants[UID]) {
              participants[UID].isAudioMuted = true;
            }
            sendRTM({ type: 'mute', uid: UID, state: true });
          }
        }
        
        if (data.device === 'cam') {
          canUseCam = data.state;
          showAlert(`–ö–∞–º–µ—Ä–∞ ${data.state ? '—Ä–∞–∑—Ä–µ—à–µ–Ω–∞' : '–∑–∞–ø—Ä–µ—â–µ–Ω–∞'}`, data.state ? "success" : "warning");
          
          // –ï—Å–ª–∏ –∑–∞–ø—Ä–µ—Ç–∏–ª–∏ –∏ –∫–∞–º–µ—Ä–∞ –≤–∫–ª—é—á–µ–Ω–∞ - –≤—ã–∫–ª—é—á–∞–µ–º
          if (!data.state && !isVideoMuted && localTracks.video) {
            localTracks.video.setMuted(true);
            isVideoMuted = true;
            if (participants[UID]) {
              participants[UID].isVideoMuted = true;
            }
            sendRTM({ type: 'cam_off', uid: UID, state: true });
          }
        }
        
        updateLocalControls();
      }
      
      updateUI();
      break;

    case 'grant_word':
      // –ï—Å–ª–∏ –Ω–∞–º –¥–∞–ª–∏ —Å–ª–æ–≤–æ
      if (uid === UID) {
        isSpeaker = true;
        showAlert("–í–∞–º –¥–∞–ª–∏ —Å–ª–æ–≤–æ", "success");
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–≤–æ—Ä—è—â–µ–≥–æ —É –í–°–ï–•
      currentSpeakerUid = uid;
      
      // –í–∞–∂–Ω–æ: –æ–±–Ω–æ–≤–ª—è–µ–º UI –¥–ª—è –≤—Å–µ—Ö
      updateUI();
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ —Ç–µ–∫—É—â–µ–º –≥–æ–≤–æ—Ä—è—â–µ–º
      if (participants[uid]) {
        sendRTM({
          type: "current_speaker",
          speakerUid: uid,
          speakerName: participants[uid].name
        });
      }
      break;

    case 'revoke_word':
      // –ï—Å–ª–∏ —É –Ω–∞—Å –∑–∞–±—Ä–∞–ª–∏ —Å–ª–æ–≤–æ
      if (uid === UID) {
        isSpeaker = false;
        showAlert("–£ –≤–∞—Å –∑–∞–±—Ä–∞–ª–∏ —Å–ª–æ–≤–æ", "warning");
      }
      
      // –ù–∞—Ö–æ–¥–∏–º UID –≤–µ–¥—É—â–µ–≥–æ
      const hostUid = Object.entries(participants).find(([_, p]) => p.isHost)?.[0] || null;
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–æ–≤–æ –≤–µ–¥—É—â–µ–º—É
      if (hostUid) {
        currentSpeakerUid = hostUid;
        
        // –û–ø–æ–≤–µ—â–∞–µ–º –≤—Å–µ—Ö –æ —Å–º–µ–Ω–µ –≥–æ–≤–æ—Ä—è—â–µ–≥–æ
        sendRTM({
          type: "current_speaker",
          speakerUid: hostUid,
          speakerName: participants[hostUid].name
        });
      } else {
        currentSpeakerUid = null;
      }
      
      // –í–∞–∂–Ω–æ: –æ–±–Ω–æ–≤–ª—è–µ–º UI –¥–ª—è –≤—Å–µ—Ö
      updateUI();
      break;

    case 'raise_hand':
      if (IS_HOST || IS_SUPERUSER) {
        showHandDialog(uid, name);
      }
      break;

    case 'kicked':
      if (uid === UID) {
        showAlert("–í—ã –±—ã–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏", "error");
        localStorage.setItem('kicked_from_' + ROOM_ID, 'true');
        setTimeout(() => {
          window.location.href = "/livestream/";
        }, 2000);
      } else if (participants[uid]) {
        // –£–¥–∞–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
        delete participants[uid];
        
                // –ï—Å–ª–∏ –∏—Å–∫–ª—é—á–∏–ª–∏ –≥–æ–≤–æ—Ä—è—â–µ–≥–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–æ–≤–æ –≤–µ–¥—É—â–µ–º—É
        if (currentSpeakerUid === uid) {
          const hostUid = Object.entries(participants).find(([_, p]) => p.isHost)?.[0] || null;
          if (hostUid) {
            currentSpeakerUid = hostUid;
            
            sendRTM({
              type: "current_speaker",
              speakerUid: hostUid,
              speakerName: participants[hostUid].name
            });
          } else {
            currentSpeakerUid = null;
          }
        }
        
        updateUI();
      }
      break;
      
    case 'room_ended':
      roomEnded = true;
      showAlert("–¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤–µ–¥—É—â–∏–º", "warning");
      setTimeout(() => {
        window.location.href = "/livestream/";
      }, 2000);
      break;

    default:
      console.warn('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø RTM:', type);
  }
}

// === –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI ===
function updateUI() {
  updateMainSpeaker();
  updateParticipantsColumn();
  updateParticipantPanel();
  updateWordToggleButton();
}

// === –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Å–ª–æ–≤–∞ ===
function updateWordToggleButton() {
  const btn = document.getElementById("word-toggle-btn");
  if (!btn) return;

  // –í–µ–¥—É—â–∏–π, –Ω–æ –Ω–µ –≥–æ–≤–æ—Ä–∏—Ç —Å–µ–π—á–∞—Å
  if (IS_HOST && currentSpeakerUid !== UID && currentSpeakerUid !== null) {
    btn.style.display = "inline-flex";
    btn.title = "–ó–∞–±—Ä–∞—Ç—å —Å–ª–æ–≤–æ";
    btn.innerHTML = '<img src="/static/img/word_back.png" class="icon-btn" alt="–°–ª–æ–≤–æ">';
    btn.onclick = () => {
      sendRTM({ type: 'revoke_word', uid: currentSpeakerUid });
      showAlert("–í—ã –∑–∞–±—Ä–∞–ª–∏ —Å–ª–æ–≤–æ", "success");
    };
    return;
  }

  // –ì–æ–≤–æ—Ä—è—â–∏–π (–Ω–µ –≤–µ–¥—É—â–∏–π) —Ö–æ—á–µ—Ç –≤–µ—Ä–Ω—É—Ç—å —Å–ª–æ–≤–æ
  if (!IS_HOST && isSpeaker && currentSpeakerUid === UID) {
    btn.style.display = "inline-flex";
    btn.title = "–í–µ—Ä–Ω—É—Ç—å —Å–ª–æ–≤–æ";
    btn.innerHTML = '<img src="/static/img/word_back.png" class="icon-btn" alt="–°–ª–æ–≤–æ">';
    btn.onclick = () => {
      sendRTM({ type: 'revoke_word', uid: UID });
      showAlert("–í—ã –≤–µ—Ä–Ω—É–ª–∏ —Å–ª–æ–≤–æ –≤–µ–¥—É—â–µ–º—É", "info");
    };
    return;
  }

  // –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
  btn.style.display = "none";
}

// === –ì–ª–∞–≤–Ω—ã–π –≥–æ–≤–æ—Ä—è—â–∏–π ===
function updateMainSpeaker() {
  const container = document.getElementById('main-speaker-container');
  if (!container) return;

  container.innerHTML = '';

  if (!currentSpeakerUid || !participants[currentSpeakerUid]) {
    container.innerHTML = `<div class="no-speaker">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≥–æ–≤–æ—Ä—è—â–µ–≥–æ</div>`;
    return;
  }

  const p = participants[currentSpeakerUid];
  const card = document.createElement('div');
  card.className = 'user-card main-speaker-card';
  card.id = `main-speaker-${currentSpeakerUid}`;

  const video = document.createElement('div');
  video.className = 'video-slot';
  video.id = `video-main-${currentSpeakerUid}`;
  card.appendChild(video);

  const info = document.createElement('div');
  info.className = 'video-info';

  const name = document.createElement('div');
  name.className = 'video-name';
  name.innerText = p.name;
  if (currentSpeakerUid === UID) name.innerText += " (–í—ã)";
  if (p.isHost) name.innerText += " (–í–µ–¥—É—â–∏–π)";
  info.appendChild(name);

  // –ò–∫–æ–Ω–∫–∏
  const icons = document.createElement('div');
  icons.className = 'video-icons';

  const mic = document.createElement('img');
  mic.src = `/static/img/${p.isAudioMuted ? 'mic-off' : 'mic-on'}.png`;
  mic.className = 'status-icon';
  icons.appendChild(mic);

  const cam = document.createElement('img');
  cam.src = `/static/img/${p.isVideoMuted ? 'cam-off' : 'cam-on'}.png`;
  cam.className = 'status-icon';
  icons.appendChild(cam);

  // crown
  if (p.isHost) {
    const host = document.createElement("img");
    host.src = "/static/img/crown.png";
    host.className = "status-icon";
    icons.appendChild(host);
  }

  info.appendChild(icons);
  card.appendChild(info);

  container.appendChild(card);

  // üé• –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–∏–¥–µ–æ
  setTimeout(() => {
    if (currentSpeakerUid === UID && localTracks.video && !isVideoMuted)
      localTracks.video.play(`video-main-${currentSpeakerUid}`);
    else if (p.videoTrack && !p.isVideoMuted)
      p.videoTrack.play(`video-main-${currentSpeakerUid}`);
    else
      video.innerHTML = `<div class="video-placeholder">–í–∏–¥–µ–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ</div>`;
  }, 100);
}

// === –£—á–∞—Å—Ç–Ω–∏–∫–∏ (–∫–æ–ª–æ–Ω–∫–∞) ===
function updateParticipantsColumn() {
  const column = document.getElementById('secondary-participants');
  if (!column) return;

  column.innerHTML = '';

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: —Å–Ω–∞—á–∞–ª–∞ –≤–µ–¥—É—â–∏–π, –ø–æ—Ç–æ–º —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø–æ—Ç–æ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
  const others = Object.entries(participants)
    .filter(([uid]) => uid !== currentSpeakerUid)
    .sort(([uidA, a], [uidB, b]) => {
      if (a.isHost) return -1; // –í–µ–¥—É—â–∏–π –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–≤—ã–π
      if (b.isHost) return 1;
      if (uidA === UID) return -1; // –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å–ª–µ –≤–µ–¥—É—â–µ–≥–æ
      if (uidB === UID) return 1;
      return a.name.localeCompare(b.name); // –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
    });

  others.forEach(([uid, p]) => {
    const card = document.createElement('div');
    card.className = 'user-card';
    if (p.isHost) card.classList.add('host-card');
    if (uid === UID) card.classList.add('current-user-card');
    card.id = `part-${uid}`;

    // –í–∏–¥–µ–æ
    const video = document.createElement('div');
    video.className = 'video-slot';
    video.id = `video-${uid}`;
    card.appendChild(video);

    // Info bar
    const info = document.createElement('div');
    info.className = 'video-info';

    const name = document.createElement('div');
    name.className = 'video-name';
    name.innerText = p.name;
    if (uid === UID) name.innerText += " (–í—ã)";
    if (p.isHost) name.innerText += " (–í–µ–¥—É—â–∏–π)";
    info.appendChild(name);

    const icons = document.createElement('div');
    icons.className = 'video-icons';

    const mic = document.createElement("img");
    mic.src = `/static/img/${p.isAudioMuted ? 'mic-off' : 'mic-on'}.png`;
    mic.className = "status-icon";
    icons.appendChild(mic);

    const cam = document.createElement("img");
    cam.src = `/static/img/${p.isVideoMuted ? 'cam-off' : 'cam-on'}.png`;
    cam.className = "status-icon";
    icons.appendChild(cam);

    if (p.isHost) {
      const host = document.createElement("img");
      host.src = "/static/img/crown.png";
      host.className = "status-icon";
      icons.appendChild(host);
    }

    info.appendChild(icons);
    card.appendChild(info);
    column.appendChild(card);

    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–∏–¥–µ–æ
    setTimeout(() => {
      if (uid === UID && localTracks.video && !isVideoMuted)
        localTracks.video.play(`video-${uid}`);
      else if (p.videoTrack && !p.isVideoMuted)
        p.videoTrack.play(`video-${uid}`);
      else
        video.innerHTML = `<div class="video-placeholder">–í–∏–¥–µ–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ</div>`;
    }, 100);
  });
}

// === –ü–∞–Ω–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ===
function updateParticipantPanel() {
  const panel = document.getElementById("participants-panel");
  if (!panel) return;
  panel.innerHTML = "";

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: —Å–Ω–∞—á–∞–ª–∞ –≤–µ–¥—É—â–∏–π, –ø–æ—Ç–æ–º —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø–æ—Ç–æ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
  const sortedParticipants = Object.entries(participants).sort(([uidA, a], [uidB, b]) => {
    if (a.isHost) return -1; // –í–µ–¥—É—â–∏–π –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–≤—ã–π
    if (b.isHost) return 1;
    if (uidA === UID) return -1; // –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å–ª–µ –≤–µ–¥—É—â–µ–≥–æ
    if (uidB === UID) return 1;
    return a.name.localeCompare(b.name); // –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
  });

  sortedParticipants.forEach(([uid, p]) => {
    const row = document.createElement("div");
    row.className = "user-row";
    
    // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –≥–æ–≤–æ—Ä—è—â–µ–≥–æ
    if (uid === currentSpeakerUid) {
      row.classList.add("speaking");
    }
    
    // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –≤–µ–¥—É—â–µ–≥–æ –∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (p.isHost) {
      row.classList.add("host-row");
    }
    if (uid === UID) {
      row.classList.add("current-user-row");
    }

    const name = document.createElement("span");
    name.className = "user-name-row";
    name.textContent = p.name;
    if (uid === UID) name.textContent += " (–í—ã)";
    if (p.isHost) name.textContent += " (–í–µ–¥—É—â–∏–π)";
    if (uid === currentSpeakerUid) name.textContent += " (–ì–æ–≤–æ—Ä–∏—Ç)";
    row.appendChild(name);

    // –¢–æ–ª—å–∫–æ –≤–µ–¥—É—â–∏–π/—Å—É–ø–µ—Ä–∞–¥–º–∏–Ω —É–ø—Ä–∞–≤–ª—è—é—Ç
    if ((IS_HOST || IS_SUPERUSER) && uid !== UID) {
      const actions = document.createElement("div");
      actions.className = "user-actions";

      // –ú–∏–∫—Ä–æ—Ñ–æ–Ω
      const micBtn = document.createElement("button");
      micBtn.className = "action-btn";
      micBtn.title = p.isAudioMuted ? "–í–∫–ª—é—á–∏—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω" : "–í—ã–∫–ª—é—á–∏—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω";
      micBtn.innerHTML = `<img src="/static/img/${p.isAudioMuted ? 'mic-off' : 'mic-on'}.png" class="action-icon">`;
      micBtn.onclick = () => sendRTM({ type: "mute", uid, state: !p.isAudioMuted });
      actions.appendChild(micBtn);

      // –ö–∞–º–µ—Ä–∞
      const camBtn = document.createElement("button");
      camBtn.className = "action-btn";
      camBtn.title = p.isVideoMuted ? "–í–∫–ª—é—á–∏—Ç—å –∫–∞–º–µ—Ä—É" : "–í—ã–∫–ª—é—á–∏—Ç—å –∫–∞–º–µ—Ä—É";
      camBtn.innerHTML = `<img src="/static/img/${p.isVideoMuted ? 'cam-off' : 'cam-on'}.png" class="action-icon">`;
      camBtn.onclick = () => sendRTM({ type: "cam_off", uid, state: !p.isVideoMuted });
      actions.appendChild(camBtn);

      // Permission mic - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–∫–æ–Ω–∫–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      const micPerm = document.createElement("button");
      micPerm.className = `action-btn ${p.allowMic ? 'allow' : 'deny'}`;
      micPerm.title = p.allowMic ? "–ó–∞–ø—Ä–µ—Ç–∏—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω" : "–†–∞–∑—Ä–µ—à–∏—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω";
      micPerm.innerHTML = `<img src="/static/img/${p.allowMic ? 'mic-block' : 'mic-on'}.png" class="action-icon">`;
      micPerm.onclick = () => {
        // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        const newState = !p.allowMic;
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        p.allowMic = newState;
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        micPerm.title = newState ? "–ó–∞–ø—Ä–µ—Ç–∏—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω" : "–†–∞–∑—Ä–µ—à–∏—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω";
        micPerm.innerHTML = `<img src="/static/img/${newState ? 'mic-block' : 'mic-on'}.png" class="action-icon">`;
        micPerm.className = `action-btn ${newState ? 'allow' : 'deny'}`;
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª
        sendRTM({ 
          type: "permission", 
          uid, 
          device: "mic", 
          state: newState 
        });
      };
      actions.appendChild(micPerm);

      // Permission cam - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–∫–æ–Ω–∫–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      const camPerm = document.createElement("button");
      camPerm.className = `action-btn ${p.allowCam ? 'allow' : 'deny'}`;
      camPerm.title = p.allowCam ? "–ó–∞–ø—Ä–µ—Ç–∏—Ç—å –∫–∞–º–µ—Ä—É" : "–†–∞–∑—Ä–µ—à–∏—Ç—å –∫–∞–º–µ—Ä—É";
      camPerm.innerHTML = `<img src="/static/img/${p.allowCam ? 'cam-block' : 'cam-on'}.png" class="action-icon">`;
      camPerm.onclick = () => {
        // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        const newState = !p.allowCam;
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        p.allowCam = newState;
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        camPerm.title = newState ? "–ó–∞–ø—Ä–µ—Ç–∏—Ç—å –∫–∞–º–µ—Ä—É" : "–†–∞–∑—Ä–µ—à–∏—Ç—å –∫–∞–º–µ—Ä—É";
        camPerm.innerHTML = `<img src="/static/img/${newState ? 'cam-block' : 'cam-on'}.png" class="action-icon">`;
        camPerm.className = `action-btn ${newState ? 'allow' : 'deny'}`;
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª
        sendRTM({ 
          type: "permission", 
          uid, 
          device: "cam", 
          state: newState 
        });
      };
      actions.appendChild(camPerm);

      // üéôÔ∏è –î–∞—Ç—å / –∑–∞–±—Ä–∞—Ç—å —Å–ª–æ–≤–æ - –ò–°–ü–†–ê–í–õ–ï–ù–û
      if (currentSpeakerUid === uid) {
        // –ï—Å–ª–∏ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–µ–π—á–∞—Å –≥–æ–≤–æ—Ä–∏—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–∑–∞–±—Ä–∞—Ç—å —Å–ª–æ–≤–æ"
        const revoke = document.createElement("button");
        revoke.className = "action-btn word-back";
        revoke.title = "–ó–∞–±—Ä–∞—Ç—å —Å–ª–æ–≤–æ";
        revoke.innerHTML = `<img src="/static/img/word_back.png" class="action-icon">`;
        revoke.onclick = () => {
          sendRTM({ type: "revoke_word", uid });
          showAlert(`–í—ã –∑–∞–±—Ä–∞–ª–∏ —Å–ª–æ–≤–æ —É ${p.name}`, "info");
        };
        actions.appendChild(revoke);
      } else {
        // –ï—Å–ª–∏ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≥–æ–≤–æ—Ä–∏—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–¥–∞—Ç—å —Å–ª–æ–≤–æ"
        const grant = document.createElement("button");
        grant.className = "action-btn give-word";
        grant.title = "–î–∞—Ç—å —Å–ª–æ–≤–æ";
        grant.innerHTML = `<img src="/static/img/give_word.png" class="action-icon">`;
        grant.onclick = () => {
          sendRTM({ type: "grant_word", uid });
          showAlert(`–í—ã –¥–∞–ª–∏ —Å–ª–æ–≤–æ ${p.name}`, "success");
        };
        actions.appendChild(grant);
      }

      // ‚ùå –ò—Å–∫–ª—é—á–∏—Ç—å
      const kick = document.createElement("button");
      kick.className = "action-btn";
      kick.title = "–ò—Å–∫–ª—é—á–∏—Ç—å";
      kick.innerHTML = `<img src="/static/img/exit.png" class="action-icon">`;
      kick.onclick = () => {
        if (confirm(`–ò—Å–∫–ª—é—á–∏—Ç—å ${p.name}?`))
          sendRTM({ type: "kicked", uid });
      };
      actions.appendChild(kick);

      row.appendChild(actions);
    }

    panel.appendChild(row);
  });
}

// === –ß–∞—Ç ===
function renderChat(sender, message, time) {
  const log = document.getElementById('chat-log');
  if (!log) return;

  const msg = document.createElement('div');
  msg.className = 'chat-message';
  msg.innerHTML = `<strong>${sender}</strong>: ${message} <span class="chat-time">${time}</span>`;
  log.appendChild(msg);
  log.scrollTop = log.scrollHeight;
}

// === –°—Ç–∞—Ç—É—Å-–±–∞—Ä ===
function updateSpeakerBar(name) {
  // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å-–±–∞—Ä, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω
  const status = document.getElementById('speaker-status');
  if (status) {
    status.style.display = 'none';
  }
}

// === –î–∏–∞–ª–æ–≥ –ø–æ–¥–Ω—è—Ç–æ–π —Ä—É–∫–∏ ===
function showHandDialog(uid, name) {
  const dialog = document.getElementById("hand-raised-dialog");
  const userEl = document.getElementById("hand-raised-user");
  const giveBtn = document.getElementById("give-word-btn");
  const rejectBtn = document.getElementById("reject-hand-btn");

  if (!dialog || !userEl || !giveBtn || !rejectBtn) return;

  userEl.textContent = name;
  dialog.style.display = "flex";

  giveBtn.onclick = () => {
    sendRTM({ type: "grant_word", uid });
    dialog.style.display = "none";
    showAlert(`–í—ã –¥–∞–ª–∏ —Å–ª–æ–≤–æ ${name}`, "success");
  };

  rejectBtn.onclick = () => {
    dialog.style.display = "none";
  };

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –¥–∏–∞–ª–æ–≥–∞
  document.addEventListener("click", function closeDialog(e) {
    if (e.target === dialog) {
      dialog.style.display = "none";
      document.removeEventListener("click", closeDialog);
    }
  });
}

// === –î–∏–∞–ª–æ–≥ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—Ö–æ–¥ ===
function showJoinRequestDialog(uid, name) {
  // –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
  let dialog = document.getElementById("join-request-dialog");
  
  if (!dialog) {
    dialog = document.createElement("div");
    dialog.id = "join-request-dialog";
    dialog.className = "dialog-modal";
    
    const content = document.createElement("div");
    content.className = "dialog-content";
    
    const title = document.createElement("h3");
    title.textContent = "–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Ö–æ–¥";
    content.appendChild(title);
    
    const userText = document.createElement("p");
    userText.id = "join-request-user";
    content.appendChild(userText);
    
    const actions = document.createElement("div");
    actions.className = "dialog-actions";
    
    const approveBtn = document.createElement("button");
    approveBtn.id = "approve-join-btn";
    approveBtn.className = "btn-approve";
    approveBtn.textContent = "–†–∞–∑—Ä–µ—à–∏—Ç—å";
    actions.appendChild(approveBtn);
    
    const rejectBtn = document.createElement("button");
    rejectBtn.id = "reject-join-btn";
    rejectBtn.className = "btn-reject";
    rejectBtn.textContent = "–û—Ç–∫–ª–æ–Ω–∏—Ç—å";
    actions.appendChild(rejectBtn);
    
    content.appendChild(actions);
    dialog.appendChild(content);
    document.body.appendChild(dialog);
  }
  
  const userEl = document.getElementById("join-request-user");
  const approveBtn = document.getElementById("approve-join-btn");
  const rejectBtn = document.getElementById("reject-join-btn");
  
  userEl.textContent = `${name} –ø—Ä–æ—Å–∏—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤–æ–π—Ç–∏ –≤ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é`;
  dialog.style.display = "flex";
  
  approveBtn.onclick = () => {
    sendRTM({ type: "join_request_approved", uid });
    dialog.style.display = "none";
    showAlert(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${name} –¥–æ–ø—É—â–µ–Ω –∫ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏`, "success");
  };
  
  rejectBtn.onclick = () => {
    sendRTM({ type: "join_request_rejected", uid });
    dialog.style.display = "none";
    showAlert(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${name} –Ω–µ –¥–æ–ø—É—â–µ–Ω –∫ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏`, "info");
  };
  
  // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –¥–∏–∞–ª–æ–≥–∞
  document.addEventListener("click", function closeDialog(e) {
    if (e.target === dialog) {
      dialog.style.display = "none";
      document.removeEventListener("click", closeDialog);
    }
  });
}

// === –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ ===
function updateLocalControls() {
  const micBtn = document.getElementById("mic-btn");
  const micIcon = document.getElementById("mic-icon");
  const camBtn = document.getElementById("cam-btn");
  const camIcon = document.getElementById("cam-icon");
  const handBtn = document.getElementById("hand-btn");

  if (micBtn && micIcon) {
    if (!canUseMic) {
      micBtn.classList.add("disabled");
      micIcon.src = "/static/img/mic-block.png";
    } else {
      micBtn.classList.remove("disabled");
      micIcon.src = isAudioMuted ? "/static/img/mic-off.png" : "/static/img/mic-on.png";
    }
  }

  if (camBtn && camIcon) {
    if (!canUseCam) {
      camBtn.classList.add("disabled");
      camIcon.src = "/static/img/cam-block.png";
    } else {
      camBtn.classList.remove("disabled");
      camIcon.src = isVideoMuted ? "/static/img/cam-off.png" : "/static/img/cam-on.png";
    }
  }

  if (handBtn) {
    handBtn.disabled = IS_HOST || isSpeaker;
    handBtn.style.opacity = (IS_HOST || isSpeaker) ? "0.5" : "1";
  }
}

// === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ ===
function bindControlButtons() {
  const micBtn = document.getElementById('mic-btn');
  const camBtn = document.getElementById('cam-btn');
  const handBtn = document.getElementById('hand-btn');
  const leaveBtn = document.getElementById('leave-btn');
  const wordToggleBtn = document.getElementById('word-toggle-btn');

  if (micBtn)
    micBtn.onclick = () => {
      if (!canUseMic) {
        showAlert('–ú–∏–∫—Ä–æ—Ñ–æ–Ω –∑–∞–ø—Ä–µ—â—ë–Ω –≤–µ–¥—É—â–∏–º', 'warning');
        return;
      }
      isAudioMuted = !isAudioMuted;
      localTracks.audio.setMuted(isAudioMuted);
      if (participants[UID]) {
        participants[UID].isAudioMuted = isAudioMuted;
      }
      sendRTM({ type: 'mute', uid: UID, state: isAudioMuted });
      updateUI();
      updateLocalControls();
    };

  if (camBtn)
    camBtn.onclick = () => {
      if (!canUseCam) {
        showAlert('–ö–∞–º–µ—Ä–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–∞ –≤–µ–¥—É—â–∏–º', 'warning');
        return;
      }
      isVideoMuted = !isVideoMuted;
      localTracks.video.setMuted(isVideoMuted);
      if (participants[UID]) {
        participants[UID].isVideoMuted = isVideoMuted;
      }
      sendRTM({ type: 'cam_off', uid: UID, state: isVideoMuted });
      updateUI();
      updateLocalControls();
    };

  if (handBtn)
    handBtn.onclick = () => {
      if (IS_HOST || isSpeaker) return;
      hasRaisedHand = true;
      sendRTM({ type: 'raise_hand', uid: UID, name: USER_NAME });
      showAlert("–í—ã –ø–æ–¥–Ω—è–ª–∏ —Ä—É–∫—É", "info");
    };

  if (leaveBtn)
    leaveBtn.onclick = async () => {
      if (confirm("–ü–æ–∫–∏–Ω—É—Ç—å —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é?")) {
        if (rtcClient) await rtcClient.leave();
        if (rtmChannel) await rtmChannel.leave();
        if (rtmClient) await rtmClient.logout();
        window.location.href = "/livestream/";
      }
    };

  // –ö–Ω–æ–ø–∫–∞ —Å–ª–æ–≤–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –≤ updateWordToggleButton()
  if (wordToggleBtn) {
    updateWordToggleButton();
  }

  // –ü–æ–∏—Å–∫ –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö
  const search = document.getElementById("user-search");
  if (search)
    search.addEventListener("input", e => {
      const val = e.target.value.toLowerCase();
      document.querySelectorAll("#participants-panel .user-row").forEach(row => {
        row.style.display = row.textContent.toLowerCase().includes(val) ? '' : 'none';
      });
    });

  // –§–æ—Ä–º–∞ —á–∞—Ç–∞
  const chatForm = document.getElementById("chat-form");
  const chatInput = document.getElementById("chat-input");
  if (chatForm && chatInput) {
    chatForm.onsubmit = e => {
      e.preventDefault();
      const msg = chatInput.value.trim();
      if (!msg) return;

      const time = formatTime(new Date());
      sendRTM({
        type: 'chat',
        uid: UID,
        name: USER_NAME,
        message: msg,
        time
      });

      renderChat(USER_NAME, msg, time);
      chatInput.value = '';
    };
  }
}

// === –ó–∞–ø—É—Å–∫ ===
document.addEventListener('DOMContentLoaded', async () => {
  try {
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –∏—Å–∫–ª—é—á–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –æ–∂–∏–¥–∞–Ω–∏—è
    if (wasKicked) {
      showWaitingApprovalScreen();
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ RTM –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –≤–µ–¥—É—â–∏–º
      await initRTM();
      
      showAlert("–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω", "info");
    } else {
      showAlert("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...", "info");
      
      await initRTC();
      await initRTM();
      updateLocalControls();
      bindControlButtons();
      
      showAlert("–í—ã –≤ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏", "success");
    }
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ —Å—Ç–∞—Ä—Ç–∞:", err);
    showAlert("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: " + err.message, "error");
  }
});